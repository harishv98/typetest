{"version":3,"sources":["components/Header.js","components/TypingText.js","components/TypingContainer.js","hooks/timer.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","TypingText","props","words","text","split","wordState","map","word","index","currWordClass","currIndx","successClass","failedClass","TypingContainer","seconds","useState","time","setTime","isRunning","setIsRunning","intervalFunc","useRef","start","useCallback","current","setInterval","v","stop","clearInterval","useEffect","useTimer","setWord","wpm","setWpm","setCurrIndx","textData","textArr","setTextArr","initalWordState","Array","length","setWordState","elapsed","totalPassedWords","filter","Math","floor","type","value","onChange","e","target","charAt","slice","onClick","setNewText","Main","setText","fetch","then","response","res","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.925cb432.chunk.js","sourcesContent":["\nexport default function Header() {\n  return (\n    <header className=\"app-header\">\n      <div className=\"app-header__text\">\n        TypeTest\n      </div>\n    </header>\n  )\n}","import { useState } from \"react\"\n\nexport default function TypingText(props) {\n  let words = props.text.split(\" \");  \n  let wordState = props.wordState;\n\n  // console.log(wordState)\n  return (\n    <>\n      {words.map((word, index) => {\n        let \n          currWordClass = index === props.currIndx ? \"word--current \" : \"\",\n          successClass = wordState[index] ? \"word--success \" : \"\",\n          failedClass = wordState[index] === false ? \"word--failure \" : \"\";\n\n        return (<span key={\"word\" + index} className={\"test-word \" + currWordClass + successClass + failedClass}> \n          {word} \n        </span>);\n      })}\n    </>\n  )\n}","import {useState, useEffect, Fragment } from \"react\";\nimport useTimer from \"../hooks/timer\";\nimport \"../styles/TypingContainer.css\";\nimport TypingText from \"./TypingText\";\n\nconst INITIAL_SECONDS = 60;\n\nexport default function TypingContainer(props) {\n  const {start, stop, isRunning, seconds, setTime} = useTimer(INITIAL_SECONDS);\n  const [word, setWord] = useState(\"\");\n  const [wpm, setWpm] = useState(0);\n  const [currIndx, setCurrIndx] = useState(0);\n  const [textArr, setTextArr] = useState(props.textData.split(\" \"));\n\n  let initalWordState = props.textData.split(\" \");\n  const [wordState, setWordState] = useState(new Array(initalWordState.length));\n\n  useEffect(() => {\n    setTextArr(props.textData.split(\" \"));\n    if(wordState.length !== textArr.length) {\n      setWordState(new Array(textArr.length));\n    }\n  }, [props.textData, wordState, setTextArr, textArr.length]);\n\n  useEffect(() => {\n    let elapsed = INITIAL_SECONDS - seconds;\n    let totalPassedWords = wordState.filter(v => v).length;  \n\n    if(isRunning) {\n      setWpm(Math.floor(totalPassedWords / (elapsed / 60)));\n    }\n  }, [isRunning, seconds, wordState]);\n\n  let inputChange = function(e) {\n    let value = e.target.value;\n    \n    if(value.charAt(value.length-1) === \" \") {\n      if(value.length > 1 && value.charAt(value.length-1) === \" \") {\n        setWordState((v) => {\n          v[currIndx] = textArr[currIndx] === word.slice(0, word.length);\n          return v;\n        });\n\n        setCurrIndx((v) => v + 1);\n      }\n\n      value = \"\";\n    }\n    setWord(value);\n\n    if(!isRunning) {\n      start();\n    }\n  }\n\n  function reset() {\n    setWpm(0);\n    setCurrIndx(0);\n\n    stop();\n    props.setNewText();\n  }\n\n  return (\n    <Fragment>\n      <div className=\"test-paragraph\">\n        <TypingText text={props.textData} word={word} currIndx={currIndx} setWordState={setWordState} wordState={wordState}/>\n      </div>\n\n      <div className=\"flex-content test-option__groupings\">\n        <input className=\"test-option__input\" type=\"text\" value={word} onChange={inputChange}/>\n        \n        <div className=\"test-option__wpm\">{wpm} WPM</div>\n\n        <button className=\"test-option__reset\" onClick={reset}>Reset</button>\n\n        {isRunning ? seconds : \"Not started\"}\n      </div>\n    </Fragment>\n  )\n}","import { useEffect, useState, useCallback, useRef } from \"react\";\n\nexport default function useTimer(seconds = 0) {\n  const [time, setTime] = useState(seconds);\n  const [isRunning, setIsRunning] = useState(false);\n  let intervalFunc = useRef(null);\n\n  let start = useCallback(() => {\n    setIsRunning(true);\n    \n    intervalFunc.current = setInterval(() => {\n      setTime((v) => v - 1);\n    }, 1000);\n  },[setTime, setIsRunning])\n\n  let stop = useCallback(() => {\n    setIsRunning(false);\n    clearInterval(intervalFunc.current);\n    setTime(seconds);\n  }, [setIsRunning, setTime, seconds]);\n\n  useEffect(() => {\n    if(time === 0) {\n      stop();\n    }\n  });\n\n  return {\n    start,\n    stop,\n    isRunning,\n    seconds: time,\n    setTime\n  };\n}","import { useEffect, useState } from \"react\";\nimport TypingContainer from \"./TypingContainer\";\n\nexport default function Main() {\n  const [text, setText] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://metaphorpsum.com/paragraphs/1/4\", {\n      \"method\": \"GET\"\n    })\n    .then(response => {\n      return response.text()\n    }).then(res => {\n      setText(res);      \n    })\n  }, []);\n\n  function setNewText() {\n    fetch(\"http://metaphorpsum.com/paragraphs/1/4\", {\n      \"method\": \"GET\"\n    })\n    .then(response => {\n      return response.text()\n    }).then(res => {\n      setText(res);      \n    });\n  }\n\n  return (\n    <main className=\"app-main\">\n      <section className=\"typing-container\">\n        <TypingContainer textData={text} setNewText={setNewText}/>\n      </section>\n    </main>\n  )\n}","import '../styles/App.css';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}